{"version":3,"file":"static/js/327.190c6958.chunk.js","mappings":"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","sources":["Pages/PagesContact/PagesContact.styled.jsx","components/FilterForm/FilterForm.styled.jsx","components/FilterForm/FilterForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","redux/Contacts/contactSelector.jsx","components/ContactForm/ContactForm.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","Pages/PagesContact/PagesContact.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const DivApp = styled.div`\n\twidth: 700px;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tborder-radius: 5em;\n\n\tbox-shadow: rgba(0, 0, 0, 0.4) 0px 30px 90px;\n`;\n","import styled from '@emotion/styled';\n\nexport const MyLabel = styled.label`\n\tcolor: #b4886b;\n\tfont-weight: bold;\n\tdisplay: block;\n\tmargin-top: 20px;\n\ttext-align: center;\n`;\n\nexport const MyInput = styled.input`\n\tborder: 1px solid #cccccc;\n\tborder-radius: 3px;\n\tbackground: #ffffff !important;\n\toutline: none;\n\theight: 24px;\n\tcolor: #cccccc;\n\tfont-size: 11px;\n\tfont-family: Tahoma;\n\twidth: 69%;\n`;\n","import { MyLabel, MyInput } from './FilterForm.styled';\nimport PropTypes from 'prop-types';\nexport const FilterForm = ({ onChange }) => {\n\treturn (\n\t\t<MyLabel>\n\t\t\tFind contacts by name\n\t\t\t<MyInput\n\t\t\t\tonChange={onChange}\n\t\t\t\ttype=\"email\"\n\t\t\t\tname=\"filter\"\n\t\t\t\tplaceholder=\"name\"\n\t\t\t/>\n\t\t</MyLabel>\n\t);\n};\nFilterForm.propTypes = {\n\tonChange: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const MyLi = styled.li`\n\tcolor: #b4886b;\n\tfont-weight: bold;\n\tdisplay: flex;\n\tlist-style: none;\n\tmargin-bottom: 10px;\n\tjustify-content: space-between;\n\talign-items: baseline;\n`;\nexport const MyButton = styled.button`\n\tmargin-top: 10px;\n\ttext-decoration: none;\n\tdisplay: inline-block;\n\tcolor: white;\n\tpadding: 10px 20px;\n\tborder-radius: 10px;\n\tfont-family: 'Montserrat', sans-serif;\n\ttext-transform: uppercase;\n\tletter-spacing: 2px;\n\tbackground-image: linear-gradient(\n\t\tto right,\n\t\t#9eefe1 0%,\n\t\t#4830f0 51%,\n\t\t#9eefe1 100%\n\t);\n\tbox-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\n\tborder: none;\n\tcursor: pointer;\n`;\n","import { MyButton, MyLi } from './ContactItem.styled';\n// import { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n// import { useSelector } from 'react-redux';\n// import { getIsLoading } from 'redux/Contacts/contactSelector';\n\nexport const ContactItem = ({ id, name, number, deleteContact }) => {\n\t// const [isLocalLoading, setIsLocalLoading] = useState(false);\n\t// const isLoading = useSelector(getIsLoading);\n\treturn (\n\t\t<MyLi>\n\t\t\t{name}: {number}\n\t\t\t<MyButton\n\t\t\t\ttype=\"button\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tdeleteContact(id);\n\t\t\t\t\t// setIsLocalLoading(true);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tDelete\n\t\t\t</MyButton>\n\t\t</MyLi>\n\t);\n};\nContactItem.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tname: PropTypes.string.isRequired,\n\tnumber: PropTypes.string.isRequired,\n\tdeleteContact: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const ContList = styled.ul`\n\tdisplay: flex;\n\tgap: 20px;\n\tjustify-content: center;\n\tflex-direction: column;\n\tmargin-top: 20px;\n`;\n","import { ContactItem } from '../ContactItem';\nimport { ContList } from './ContactList.styled';\nimport PropTypes from 'prop-types';\n\nexport const ContactList = ({ contacts, deleteContact }) => {\n\treturn (\n\t\t<ContList>\n\t\t\t{contacts.map(({ id, name, number }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<ContactItem\n\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\tid={id}\n\t\t\t\t\t\tname={name}\n\t\t\t\t\t\tnumber={number}\n\t\t\t\t\t\tdeleteContact={deleteContact}\n\t\t\t\t\t></ContactItem>\n\t\t\t\t);\n\t\t\t})}\n\t\t</ContList>\n\t);\n};\n\nContactList.propTypes = {\n\tcontacts: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tid: PropTypes.string.isRequired,\n\t\t\tname: PropTypes.string.isRequired,\n\t\t\tnumber: PropTypes.string.isRequired,\n\t\t})\n\t).isRequired,\n\tdeleteContact: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const MyForm = styled(Form)`\n\tdisplay: flex;\n\tflex-direction: column;\n\tgap: 20px;\n\tjustify-content: center;\n`;\n\nexport const MyLabel = styled.label`\n\tcolor: #b4886b;\n\tfont-weight: bold;\n\tdisplay: block;\n\tmargin-top: 20px;\n`;\n\nexport const MyButton = styled.button`\n\tmargin-top: 10px;\n\ttext-decoration: none;\n\tdisplay: inline-block;\n\tcolor: white;\n\tpadding: 10px 20px;\n\tborder-radius: 10px;\n\tfont-family: 'Montserrat', sans-serif;\n\ttext-transform: uppercase;\n\tletter-spacing: 2px;\n\tbackground-image: linear-gradient(\n\t\tto right,\n\t\t#9eefe1 0%,\n\t\t#4830f0 51%,\n\t\t#9eefe1 100%\n\t);\n\tbox-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\n\tborder: none;\n\tcursor: pointer;\n`;\n\nexport const MyInput = styled(Field)`\n\tborder: 1px solid #cccccc;\n\tborder-radius: 3px;\n\tbackground: #ffffff !important;\n\toutline: none;\n\theight: 24px;\n\tcolor: #cccccc;\n\tfont-size: 11px;\n\tfont-family: Tahoma;\n\twidth: 100%;\n`;\nexport const ErrorText = styled.p`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tfont-size: 12px;\n\twidth: 200px;\n`;\n","export const getContactItems = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.contacts.filter;\n","import React from 'react';\nimport {\n\tMyForm,\n\tMyLabel,\n\tMyButton,\n\tMyInput,\n\tErrorText,\n} from './ContactForm.styled';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { getIsLoading } from 'redux/Contacts/contactSelector';\n\nconst schema = yup.object().shape({\n\tname: yup.string().required(),\n\tnumber: yup.string().required(),\n});\n\nconst FormError = ({ name }) => {\n\treturn (\n\t\t<ErrorMessage\n\t\t\tname={name}\n\t\t\trender={messege => <ErrorText>{messege}</ErrorText>}\n\t\t/>\n\t);\n};\n\nexport function ContactForm({ submitForm }) {\n\tconst isLoading = useSelector(getIsLoading);\n\tconst initialValues = {\n\t\tname: '',\n\t\tnumber: '',\n\t};\n\n\tconst onSubmitForm = ({ name, number }, { resetForm }) => {\n\t\tconst newContact = {\n\t\t\tname: name,\n\t\t\tnumber: number,\n\t\t};\n\t\t// !передача нового контакта в APP!\n\t\tsubmitForm(newContact);\n\t\tresetForm();\n\t};\n\treturn (\n\t\t<Formik\n\t\t\tinitialValues={initialValues}\n\t\t\tvalidationSchema={schema}\n\t\t\tonSubmit={onSubmitForm}\n\t\t>\n\t\t\t<MyForm>\n\t\t\t\t<MyLabel>\n\t\t\t\t\tName\n\t\t\t\t\t<MyInput\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"name\"\n\t\t\t\t\t\ttitle=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<FormError name=\"name\" title=\"title\" />\n\t\t\t\t</MyLabel>\n\t\t\t\t<MyLabel>\n\t\t\t\t\tNumber\n\t\t\t\t\t<MyInput\n\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\tname=\"number\"\n\t\t\t\t\t\ttitle=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t\t<FormError name=\"number\" title=\"title\" />\n\t\t\t\t</MyLabel>\n\t\t\t\t<MyButton type=\"submit\" disabled={isLoading}>\n\t\t\t\t\t{isLoading ? '...Loading' : 'Add contact'}\n\t\t\t\t</MyButton>\n\t\t\t</MyForm>\n\t\t</Formik>\n\t);\n}\n\nContactForm.propTypes = {\n\tsubmitForm: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const SectionTag = styled.section`\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-direction: column;\n\talign-items: center;\n\tmargin-left: auto;\n\tmargin-right: auto;\n`;\nexport const SectionText = styled.h1`\n\tfont-style: italic;\n\t/* font-size: -webkit-xxx-large; */\n\tfont-size: 2em;\n\tbackground: linear-gradient(135deg, #12bcb0 20%, #fabe0e 70%);\n\tbackground-clip: text;\n\tcolor: transparent;\n\tdisplay: inline-block;\n\tpadding: 0.3em 0.6em;\n\tborder-image-slice: 1;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionTag, SectionText } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n\treturn (\n\t\t<SectionTag>\n\t\t\t<SectionText>{title}</SectionText>\n\t\t\t{children}\n\t\t</SectionTag>\n\t);\n};\n\nSection.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\tchildren: PropTypes.node.isRequired,\n};\n","import { DivApp } from './PagesContact.styled';\nimport { changeFilter } from '../../redux/Contacts/contactSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n\tgetContact,\n\taddContact,\n\tdeleteContact,\n} from '../../redux/Contacts/contactsOperation';\nimport { useEffect } from 'react';\nimport { FilterForm } from './../../components/FilterForm/FilterForm';\nimport { ContactList } from './../../components/ContactList/ContactList';\nimport { ContactForm } from './../../components/ContactForm/ContactForm';\nimport { Section } from './../../components/Section/Section';\nimport {\n\tgetContactItems,\n\tgetError,\n\tgetFilter,\n} from 'redux/Contacts/contactSelector';\nimport { getIsLoggedIn } from './../../redux/Auth/AuthSelectors';\nimport { useNavigate } from 'react-router-dom';\n\nexport function PagesContact() {\n\tconst items = useSelector(getContactItems);\n\tconst filterState = useSelector(getFilter);\n\tconst errorState = useSelector(getError);\n\tconst login = useSelector(getIsLoggedIn);\n\n\tconst dispatch = useDispatch();\n\tconst navigate = useNavigate();\n\n\t// !Нотификашка\n\tif (errorState) {\n\t\talert('Десь тут помилочка)))');\n\t}\n\tuseEffect(() => {\n\t\tdispatch(getContact());\n\t}, [dispatch, login, navigate]);\n\n\tconst getValueForm = dataValue => {\n\t\tif (checkContacts(dataValue.name)) {\n\t\t\treturn alert(`${dataValue.name} is already in contacts`);\n\t\t}\n\t\tdispatch(addContact(dataValue));\n\t};\n\n\tconst checkContacts = contact => {\n\t\treturn items.find(el => el.name.toUpperCase() === contact.toUpperCase());\n\t};\n\n\tconst filtrationContact = () => {\n\t\tconst currentFilter = filterState.toUpperCase();\n\t\treturn items.filter(element => {\n\t\t\treturn element.name.toUpperCase().includes(currentFilter);\n\t\t});\n\t};\n\n\treturn (\n\t\t<DivApp>\n\t\t\t<Section title=\"Phonebook\">\n\t\t\t\t<ContactForm submitForm={getValueForm}></ContactForm>\n\t\t\t</Section>\n\t\t\t<Section title=\"Contact\">\n\t\t\t\t<FilterForm\n\t\t\t\t\tonChange={event => dispatch(changeFilter(event.currentTarget.value))}\n\t\t\t\t></FilterForm>\n\t\t\t\t<ContactList\n\t\t\t\t\tcontacts={filtrationContact()}\n\t\t\t\t\tdeleteContact={id => dispatch(deleteContact(id))}\n\t\t\t\t></ContactList>\n\t\t\t</Section>\n\t\t</DivApp>\n\t);\n}\n"],"names":["DivApp","styled","MyLabel","MyInput","FilterForm","onChange","type","name","placeholder","MyLi","MyButton","ContactItem","id","number","deleteContact","onClick","ContList","ContactList","contacts","map","MyForm","Form","Field","ErrorText","getContactItems","state","items","getIsLoading","isLoading","getError","error","getFilter","filter","schema","yup","shape","required","FormError","render","messege","ContactForm","submitForm","useSelector","initialValues","validationSchema","onSubmit","resetForm","title","disabled","SectionTag","SectionText","Section","children","PagesContact","filterState","errorState","login","getIsLoggedIn","dispatch","useDispatch","navigate","useNavigate","alert","useEffect","getContact","checkContacts","contact","find","el","toUpperCase","dataValue","addContact","event","changeFilter","currentTarget","value","currentFilter","element","includes","filtrationContact"],"sourceRoot":""}